/**
 * Daor
 * Api for DAOR MMORPG server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: julien.lebourg@ctg.lu
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIRacesApi
{
public:
	OpenAPIRacesApi();
	~OpenAPIRacesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class RouteRacesDeleteRequest;
	class RouteRacesDeleteResponse;
	class RouteRacesGetRequest;
	class RouteRacesGetResponse;
	class RouteRacesItemIdDeleteRequest;
	class RouteRacesItemIdDeleteResponse;
	class RouteRacesItemIdGetRequest;
	class RouteRacesItemIdGetResponse;
	class RouteRacesItemIdPutRequest;
	class RouteRacesItemIdPutResponse;
	class RouteRacesPostRequest;
	class RouteRacesPostResponse;
	
    DECLARE_DELEGATE_OneParam(FRouteRacesDeleteDelegate, const RouteRacesDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteRacesGetDelegate, const RouteRacesGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteRacesItemIdDeleteDelegate, const RouteRacesItemIdDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteRacesItemIdGetDelegate, const RouteRacesItemIdGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteRacesItemIdPutDelegate, const RouteRacesItemIdPutResponse&);
    DECLARE_DELEGATE_OneParam(FRouteRacesPostDelegate, const RouteRacesPostResponse&);
    
    FHttpRequestPtr RouteRacesDelete(const RouteRacesDeleteRequest& Request, const FRouteRacesDeleteDelegate& Delegate = FRouteRacesDeleteDelegate()) const;
    FHttpRequestPtr RouteRacesGet(const RouteRacesGetRequest& Request, const FRouteRacesGetDelegate& Delegate = FRouteRacesGetDelegate()) const;
    FHttpRequestPtr RouteRacesItemIdDelete(const RouteRacesItemIdDeleteRequest& Request, const FRouteRacesItemIdDeleteDelegate& Delegate = FRouteRacesItemIdDeleteDelegate()) const;
    FHttpRequestPtr RouteRacesItemIdGet(const RouteRacesItemIdGetRequest& Request, const FRouteRacesItemIdGetDelegate& Delegate = FRouteRacesItemIdGetDelegate()) const;
    FHttpRequestPtr RouteRacesItemIdPut(const RouteRacesItemIdPutRequest& Request, const FRouteRacesItemIdPutDelegate& Delegate = FRouteRacesItemIdPutDelegate()) const;
    FHttpRequestPtr RouteRacesPost(const RouteRacesPostRequest& Request, const FRouteRacesPostDelegate& Delegate = FRouteRacesPostDelegate()) const;
    
private:
    void OnRouteRacesDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesDeleteDelegate Delegate) const;
    void OnRouteRacesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesGetDelegate Delegate) const;
    void OnRouteRacesItemIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesItemIdDeleteDelegate Delegate) const;
    void OnRouteRacesItemIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesItemIdGetDelegate Delegate) const;
    void OnRouteRacesItemIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesItemIdPutDelegate Delegate) const;
    void OnRouteRacesPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteRacesPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
