/**
 * Daor
 * Api for DAOR MMORPG server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: julien.lebourg@ctg.lu
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIInventoryApi
{
public:
	OpenAPIInventoryApi();
	~OpenAPIInventoryApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class RouteInventoryDeleteRequest;
	class RouteInventoryDeleteResponse;
	class RouteInventoryGetRequest;
	class RouteInventoryGetResponse;
	class RouteInventoryItemIdDeleteRequest;
	class RouteInventoryItemIdDeleteResponse;
	class RouteInventoryItemIdGetRequest;
	class RouteInventoryItemIdGetResponse;
	class RouteInventoryItemIdPutRequest;
	class RouteInventoryItemIdPutResponse;
	class RouteInventoryPostRequest;
	class RouteInventoryPostResponse;
	
    DECLARE_DELEGATE_OneParam(FRouteInventoryDeleteDelegate, const RouteInventoryDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteInventoryGetDelegate, const RouteInventoryGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteInventoryItemIdDeleteDelegate, const RouteInventoryItemIdDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteInventoryItemIdGetDelegate, const RouteInventoryItemIdGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteInventoryItemIdPutDelegate, const RouteInventoryItemIdPutResponse&);
    DECLARE_DELEGATE_OneParam(FRouteInventoryPostDelegate, const RouteInventoryPostResponse&);
    
    FHttpRequestPtr RouteInventoryDelete(const RouteInventoryDeleteRequest& Request, const FRouteInventoryDeleteDelegate& Delegate = FRouteInventoryDeleteDelegate()) const;
    FHttpRequestPtr RouteInventoryGet(const RouteInventoryGetRequest& Request, const FRouteInventoryGetDelegate& Delegate = FRouteInventoryGetDelegate()) const;
    FHttpRequestPtr RouteInventoryItemIdDelete(const RouteInventoryItemIdDeleteRequest& Request, const FRouteInventoryItemIdDeleteDelegate& Delegate = FRouteInventoryItemIdDeleteDelegate()) const;
    FHttpRequestPtr RouteInventoryItemIdGet(const RouteInventoryItemIdGetRequest& Request, const FRouteInventoryItemIdGetDelegate& Delegate = FRouteInventoryItemIdGetDelegate()) const;
    FHttpRequestPtr RouteInventoryItemIdPut(const RouteInventoryItemIdPutRequest& Request, const FRouteInventoryItemIdPutDelegate& Delegate = FRouteInventoryItemIdPutDelegate()) const;
    FHttpRequestPtr RouteInventoryPost(const RouteInventoryPostRequest& Request, const FRouteInventoryPostDelegate& Delegate = FRouteInventoryPostDelegate()) const;
    
private:
    void OnRouteInventoryDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryDeleteDelegate Delegate) const;
    void OnRouteInventoryGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryGetDelegate Delegate) const;
    void OnRouteInventoryItemIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryItemIdDeleteDelegate Delegate) const;
    void OnRouteInventoryItemIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryItemIdGetDelegate Delegate) const;
    void OnRouteInventoryItemIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryItemIdPutDelegate Delegate) const;
    void OnRouteInventoryPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteInventoryPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
