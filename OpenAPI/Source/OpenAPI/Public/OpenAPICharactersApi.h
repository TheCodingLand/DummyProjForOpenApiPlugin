/**
 * Daor
 * Api for DAOR MMORPG server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: julien.lebourg@ctg.lu
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPICharactersApi
{
public:
	OpenAPICharactersApi();
	~OpenAPICharactersApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class RouteCharactersDeleteRequest;
	class RouteCharactersDeleteResponse;
	class RouteCharactersGetRequest;
	class RouteCharactersGetResponse;
	class RouteCharactersItemIdDeleteRequest;
	class RouteCharactersItemIdDeleteResponse;
	class RouteCharactersItemIdGetRequest;
	class RouteCharactersItemIdGetResponse;
	class RouteCharactersItemIdPutRequest;
	class RouteCharactersItemIdPutResponse;
	class RouteCharactersPostRequest;
	class RouteCharactersPostResponse;
	
    DECLARE_DELEGATE_OneParam(FRouteCharactersDeleteDelegate, const RouteCharactersDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteCharactersGetDelegate, const RouteCharactersGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteCharactersItemIdDeleteDelegate, const RouteCharactersItemIdDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteCharactersItemIdGetDelegate, const RouteCharactersItemIdGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteCharactersItemIdPutDelegate, const RouteCharactersItemIdPutResponse&);
    DECLARE_DELEGATE_OneParam(FRouteCharactersPostDelegate, const RouteCharactersPostResponse&);
    
    FHttpRequestPtr RouteCharactersDelete(const RouteCharactersDeleteRequest& Request, const FRouteCharactersDeleteDelegate& Delegate = FRouteCharactersDeleteDelegate()) const;
    FHttpRequestPtr RouteCharactersGet(const RouteCharactersGetRequest& Request, const FRouteCharactersGetDelegate& Delegate = FRouteCharactersGetDelegate()) const;
    FHttpRequestPtr RouteCharactersItemIdDelete(const RouteCharactersItemIdDeleteRequest& Request, const FRouteCharactersItemIdDeleteDelegate& Delegate = FRouteCharactersItemIdDeleteDelegate()) const;
    FHttpRequestPtr RouteCharactersItemIdGet(const RouteCharactersItemIdGetRequest& Request, const FRouteCharactersItemIdGetDelegate& Delegate = FRouteCharactersItemIdGetDelegate()) const;
    FHttpRequestPtr RouteCharactersItemIdPut(const RouteCharactersItemIdPutRequest& Request, const FRouteCharactersItemIdPutDelegate& Delegate = FRouteCharactersItemIdPutDelegate()) const;
    FHttpRequestPtr RouteCharactersPost(const RouteCharactersPostRequest& Request, const FRouteCharactersPostDelegate& Delegate = FRouteCharactersPostDelegate()) const;
    
private:
    void OnRouteCharactersDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersDeleteDelegate Delegate) const;
    void OnRouteCharactersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersGetDelegate Delegate) const;
    void OnRouteCharactersItemIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersItemIdDeleteDelegate Delegate) const;
    void OnRouteCharactersItemIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersItemIdGetDelegate Delegate) const;
    void OnRouteCharactersItemIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersItemIdPutDelegate Delegate) const;
    void OnRouteCharactersPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteCharactersPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
