/**
 * Daor
 * Api for DAOR MMORPG server.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: julien.lebourg@ctg.lu
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPILoginsApi
{
public:
	OpenAPILoginsApi();
	~OpenAPILoginsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class RouteLoginsDeleteRequest;
	class RouteLoginsDeleteResponse;
	class RouteLoginsGetRequest;
	class RouteLoginsGetResponse;
	class RouteLoginsItemIdDeleteRequest;
	class RouteLoginsItemIdDeleteResponse;
	class RouteLoginsItemIdGetRequest;
	class RouteLoginsItemIdGetResponse;
	class RouteLoginsItemIdPutRequest;
	class RouteLoginsItemIdPutResponse;
	class RouteLoginsPostRequest;
	class RouteLoginsPostResponse;
	
    DECLARE_DELEGATE_OneParam(FRouteLoginsDeleteDelegate, const RouteLoginsDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteLoginsGetDelegate, const RouteLoginsGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteLoginsItemIdDeleteDelegate, const RouteLoginsItemIdDeleteResponse&);
    DECLARE_DELEGATE_OneParam(FRouteLoginsItemIdGetDelegate, const RouteLoginsItemIdGetResponse&);
    DECLARE_DELEGATE_OneParam(FRouteLoginsItemIdPutDelegate, const RouteLoginsItemIdPutResponse&);
    DECLARE_DELEGATE_OneParam(FRouteLoginsPostDelegate, const RouteLoginsPostResponse&);
    
    FHttpRequestPtr RouteLoginsDelete(const RouteLoginsDeleteRequest& Request, const FRouteLoginsDeleteDelegate& Delegate = FRouteLoginsDeleteDelegate()) const;
    FHttpRequestPtr RouteLoginsGet(const RouteLoginsGetRequest& Request, const FRouteLoginsGetDelegate& Delegate = FRouteLoginsGetDelegate()) const;
    FHttpRequestPtr RouteLoginsItemIdDelete(const RouteLoginsItemIdDeleteRequest& Request, const FRouteLoginsItemIdDeleteDelegate& Delegate = FRouteLoginsItemIdDeleteDelegate()) const;
    FHttpRequestPtr RouteLoginsItemIdGet(const RouteLoginsItemIdGetRequest& Request, const FRouteLoginsItemIdGetDelegate& Delegate = FRouteLoginsItemIdGetDelegate()) const;
    FHttpRequestPtr RouteLoginsItemIdPut(const RouteLoginsItemIdPutRequest& Request, const FRouteLoginsItemIdPutDelegate& Delegate = FRouteLoginsItemIdPutDelegate()) const;
    FHttpRequestPtr RouteLoginsPost(const RouteLoginsPostRequest& Request, const FRouteLoginsPostDelegate& Delegate = FRouteLoginsPostDelegate()) const;
    
private:
    void OnRouteLoginsDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsDeleteDelegate Delegate) const;
    void OnRouteLoginsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsGetDelegate Delegate) const;
    void OnRouteLoginsItemIdDeleteResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsItemIdDeleteDelegate Delegate) const;
    void OnRouteLoginsItemIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsItemIdGetDelegate Delegate) const;
    void OnRouteLoginsItemIdPutResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsItemIdPutDelegate Delegate) const;
    void OnRouteLoginsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRouteLoginsPostDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
